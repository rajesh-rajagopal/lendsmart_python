# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

import os
import platform
from lendsmart import __version__
from lendsmart.base.exceptions import LendsmartException
from lendsmart.base.obsolete import obsolete_client
from lendsmart.http.http_client import LendsmartHttpClient


class Client(object):
    """ A client for accessing the Lendsmart API. """

    def __init__(self, username=None, password=None, account_sid=None, region=None,
                 http_client=None, environment=None):
        """
        Initializes the Lendsmart Client

        :param str username: Username to authenticate with
        :param str password: Password to authenticate with
        :param str account_sid: Account Sid, defaults to Username
        :param HttpClient http_client: HttpClient, defaults to LendsmartHttpClient
        :param dict environment: Environment to look for auth details, defaults to os.environ

        :returns: Lendsmart Client
        :rtype: lendsmart.rest.Client
        """
        environment = environment or os.environ

        self.username = username or environment.get('LENDSMART_ACCOUNT_SID')
        """ :type : str """
        self.password = password or environment.get('LENDSMART_AUTH_TOKEN')
        """ :type : str """
        self.account_sid = account_sid or self.username
        """ :type : str """
        self.region = region
        """ :type : str """

        if not self.username or not self.password:
            raise LendsmartException("Credentials are required to create a LendsmartClient")

        self.auth = (self.username, self.password)
        """ :type : tuple(str, str) """
        self.http_client = http_client or LendsmartHttpClient()
        """ :type : HttpClient """

        # Domains
        self._prediction = None
        self._document = None

    def request(self, method, uri, params=None, data=None, headers=None, auth=None,
                timeout=None, allow_redirects=False):
        """
        Makes a request to the Lendsmart API using the configured http client
        Authentication information is automatically added if none is provided

        :param str method: HTTP Method
        :param str uri: Fully qualified url
        :param dict[str, str] params: Query string parameters
        :param dict[str, str] data: POST body data
        :param dict[str, str] headers: HTTP Headers
        :param tuple(str, str) auth: Authentication
        :param int timeout: Timeout in seconds
        :param bool allow_redirects: Should the client follow redirects

        :returns: Response from the Lendsmart API
        :rtype: lendsmart.http.response.Response
        """
        auth = auth or self.auth
        headers = headers or {}

        headers['User-Agent'] = 'lendsmart-python/{} (Python {})'.format(
            __version__,
            platform.python_version(),
        )
        headers['X-Lendsmart-Client'] = 'python-{}'.format(__version__)
        headers['Accept-Charset'] = 'utf-8'

        if method == 'POST' and 'Content-Type' not in headers:
            headers['Content-Type'] = 'application/x-www-form-urlencoded'

        if 'Accept' not in headers:
            headers['Accept'] = 'application/json'

        if self.region:
            head, tail = uri.split('.', 1)

            if not tail.startswith(self.region):
                uri = '.'.join([head, self.region, tail])

        return self.http_client.request(
            method,
            uri,
            params=params,
            data=data,
            headers=headers,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects
        )

    @property
    def prediction(self):
        """
        Access the Pricing Lendsmart Domain

        :returns: Pricing Lendsmart Domain
        :rtype: lendsmart.rest.pricing.Pricing
        """
        if self._prediction is None:
            from lendsmart.rest.prediction import Prediction
            self._prediction = Prediction(self)
        return self._prediction

    @property
    def document(self):
        """
        Access the Messaging Lendsmart Domain

        :returns: Messaging Lendsmart Domain
        :rtype: lendsmart.rest.messaging.Messaging
        """
        if self._messaging is None:
            from lendsmart.rest.messaging import Messaging
            self._messaging = Messaging(self)
        return self._messaging

    @property
    def voice(self):
        """
        Access the Voice Lendsmart Domain

        :returns: Voice Lendsmart Domain
        :rtype: lendsmart.rest.voice.Voice
        """
        if self._voice is None:
            from lendsmart.rest.voice import Voice
            self._voice = Voice(self)
        return self._voice

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Lendsmart {}>'.format(self.account_sid)
