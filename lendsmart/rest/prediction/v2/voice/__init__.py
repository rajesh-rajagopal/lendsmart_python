# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from lendsmart.base.instance_resource import InstanceResource
from lendsmart.base.list_resource import ListResource
from lendsmart.base.page import Page
from lendsmart.rest.prediction.v2.voice.chunk import CountryList


class VoiceList(ListResource):
    """  """

    def __init__(self, version):
        """
        Initialize the VoiceList

        :param Version version: Version that contains the resource

        :returns: lendsmart.rest.prediction.v2.voice.VoiceList
        :rtype: lendsmart.rest.prediction.v2.voice.VoiceList
        """
        super(VoiceList, self).__init__(version)

        # Path Solution
        self._solution = {}

        # Components
        self._chunks = None

    @property
    def chunks(self):
        """
        Access the chunks

        :returns: lendsmart.rest.prediction.v2.voice.chunk.CountryList
        :rtype: lendsmart.rest.prediction.v2.voice.chunk.CountryList
        """
        if self._chunks is None:
            self._chunks = CountryList(self._version, )
        return self._chunks

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Lendsmart.Prediction.V2.VoiceList>'


class VoiceInstance(InstanceResource):
    """  """

    def __init__(self, version, payload):
        """
        Initialize the VoiceInstance

        :returns: lendsmart.rest.prediction.v2.voice.VoiceInstance
        :rtype: lendsmart.rest.prediction.v2.voice.VoiceInstance
        """
        super(VoiceInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {'name': payload['name'], 'url': payload['url'], 'links': payload['links'], }

        # Context
        self._context = None
        self._solution = {}

    @property
    def name(self):
        """
        :returns: The name
        :rtype: unicode
        """
        return self._properties['name']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def links(self):
        """
        :returns: The links
        :rtype: unicode
        """
        return self._properties['links']

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Lendsmart.Prediction.V2.VoiceInstance>'

